[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
    { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
requires-python = ">=3.9"
readme = "README.rst"
keywords = []

{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
{%- if cookiecutter.open_source_license in license_classifiers %}
        "{{ license_classifiers[cookiecutter.open_source_license] }}",
{%- endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = []

[project.optional-dependencies]
notebooks = [
    "jupyter>=1.0.0",
]

{%- if cookiecutter.open_source_license in license_classifiers %}
[project.license]
text = "{{ cookiecutter.open_source_license }}"
{%- endif %}

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.github_slug }}"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.2",
]
dev = [
    "pip>=19.2.3",
    "tox-pdm>=0.7.0",
    "pdm-bump>=0.7.0",
    "wheel>=0.33.6",
    "watchdog>=0.9.0",
    "flake8>=3.7.8",
    "coverage>=4.5.4",
    "twine>=1.14.0",
    "black>=21.7b0",
    "pre-commit>=3.4.0",
]
doc = [
    "sphinx",
    "myst-nb",
    "sphinx-rtd-theme",
]

[tool.black]
line-length = 99
target-version = [
    "py39",
    "py310",
    "py311",
    "py312",
]
include = "\\.pyi?$"
exclude = "/(\n  \\.toml\n  |\\.sh\n  |\\.git\n  |\\.ini\n  |Dockerfile\n  |Jenkinfile\n)/\n"

[tool.pdm.scripts]
lint-flake8 = {cmd = "flake8 {{ cookiecutter.project_slug }} tests", help = "Check style with flake8"}
lint-black = { cmd = "black --check {{ cookiecutter.project_slug }} tests", help = "Check style with black"}
lint = {composite = ["lint-flake8", "lint/black"], help = "Check style"}
test = { cmd = "pytest", help = "Run tests quickly with the default Python" }
test-all = { cmd = "tox", help = "Run tests on every Python version with tox" }
MAKE = {shell = "MAKE"}

[tool.pdm.scripts.install-dev]
help = "Install with dev dependencies"
composite = [
    "pdm sync --dev",
    "pre-commit install",
]

[tool.pdm.scripts.install]
help = "Install using pdm as package manager"
composite = [
    "pdm sync --prod",
    "pre-commit install",
]

[tool.pdm.scripts.clean-build]
help = "Remove build artifacts"
composite = [
    "rm -fr build/",
    "rm -fr dist/",
    "rm -fr .eggs/",
    "find . -name '*.egg-info' -exec rm -fr {} +",
    "find . -name '*.egg' -exec rm -f {} +",
]

[tool.pdm.scripts.clean-pyc]
help = "Remove Python file artifacts"
composite = [
    "find . -name '*.pyc' -exec rm -f {} +",
    "find . -name '*.pyo' -exec rm -f {} +",
    "find . -name '*~' -exec rm -f {} +",
    "find . -name '__pycache__' -exec rm -fr {} +",
]

[tool.pdm.scripts.clean-test]
help = "Remove test and coverage artifacts"
composite = [
    "rm -fr .tox/",
    "rm -f .coverage",
    "rm -fr htmlcov/",
    "rm -fr .pytest_cache",
]

[tool.pdm.scripts.clean]
help = "Remove all build, test, coverage and Python artifacts"
composite = [
    "clean-build",
    "clean-pyc",
    "clean-test",
]

[tool.pdm.scripts.coverage-report]
help = "Check code coverage quickly with the default Python"
composite = [
    "coverage run --source {{ cookiecutter.project_slug }} -m pytest",
    "coverage report -m",
    "coverage html",
    "open htmlcov/index.html",
]

[tool.pdm.scripts.release]
help = "Package and upload a release"
composite = [
    "dist",
    "pdm publish",
]

[tool.pdm.scripts.dist]
help = "Build source and wheel package"
composite = [
    "clean",
    "pdm build",
]

[tool.pdm.scripts.browser]
help = "Open the given argument in a browser window using Python"
cmd = """
python -c "
import os, webbrowser, sys;
from urllib.request import pathname2url;
webbrowser.open(f'file://{pathname2url(os.path.abspath(sys.argv[1]))}')
"
"""

[tool.pdm.scripts.docs]
help = "Generate Sphinx HTML documentation, including API docs"
composite = [
	"rm -f docs/{{ cookiecutter.project_slug }}.rst",
	"rm -f docs/modules.rst",
	"sphinx-apidoc -o docs/ {{ cookiecutter.project_slug }}",
	"MAKE -C docs clean",
	"MAKE -C docs html",
	"browser docs/_build/html/index.html",
]

[tool.pdm.scripts.serve-docs]
help = "Compile the docs watching for changes"
composite = [
    "docs",
    "watchmedo shell-command -p '*.rst' -c '$(MAKE) -C docs html' -R -D ."
]

[tool.pdm.scripts.catch-me-up]
help = "Check out the latest stable code, check for new dependencies, and update your environment"
composite = [
    "git checkout main",
    "git pull",
    "pdm self update",
    "pdm sync",
]
